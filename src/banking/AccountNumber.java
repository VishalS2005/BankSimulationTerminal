package banking;

import java.text.DecimalFormat;
import java.util.Random;

/**
 * The AccountNumber class holds the Account Number.
 * The account number is a  9-digit number composed of a:
 * 3-digit branch code, a 2-digit account type, and a 4-digit serial number randomly generated by the system.
 * For the account type, 01 represents checking, 02 represents regular savings, and 03 represents money market savings.
 *
 * @author Vishal Saravanan, Yining Chen
 */

public class AccountNumber implements Comparable<AccountNumber> {
    /**
     * for a fix sequence of random numbers
     */
    private static final int SEED = 9999;

    /**
     * Branch object that represents location of bank
     */
    private Branch branch;

    /**
     * AccountType object that represents checking/savings/money market account
     */
    private AccountType type;

    /**
     * a 4-digit number generated by the Random object
     */
    private String number;

    /**
     * Represents the random 4 digit serial number
     */
    private static final Random RANDOM = new Random(SEED);

    /**
     * Formatting for 4 digits
     */
    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0000");

    /**
     * Creates an AccountNumber object.
     *
     * @param branch 3-digit representation of the branch
     * @param type 2-digit reprsentation of the type of account
     */
    public AccountNumber(Branch branch, AccountType type) {
        this.branch = branch;
        this.type = type;
        int num = RANDOM.nextInt(SEED);
        this.number = DECIMAL_FORMAT.format(num);
    }

    /**
     * Creates an AccountNumber by extracting, branch code, type code, and serial number from a String.
     * Traverses through branch and sets branchCode to a Branch object,
     * AccountType to an AccountType object and serial number as a String representation.
     *
     * @param number String representation of the AccountNumber of an Account
     */
    public AccountNumber(String number) {
        String branchCode = number.substring(0, 3);
        String typeCode = number.substring(3, 5);
        String serialNumber = number.substring(5, 9);

        for (Branch branch : Branch.values()) {
            if (branch.getBranchCode().equalsIgnoreCase(branchCode)) {
                this.branch = branch;
                break;
            }
        }
        for (AccountType type : AccountType.values()) {
            if (type.getCode().equalsIgnoreCase(typeCode)) {
                this.type = type;
                break;
            }
        }

        this.number = serialNumber;
    }

    /**
     * Gets the 3-digit Branch portion of the AccountNumber.
     *
     * @return Branch object of the AccountNumber
     */
    public Branch getBranch() {
        return this.branch;
    }

    /**
     * Gets the 2-digit AccountType portion of the AccountNumber.
     *
     * @return AccountType object of the AccountNumber
     */
    public AccountType getType() {
        return this.type;
    }

    /**
     * Compares two Accounts by their AccountNumber.
     *
     * @param other the object to be compared.
     * @return 0 if AccountNumbers are the same
     * negative integer if the first AccountNumber is less than the second AccountNumber
     * positive integer if the first AccountNumber is greater than the second AccountNumber
     */
    @Override
    public int compareTo(AccountNumber other) {
        int aNumber = Integer.parseInt(this.branch.getBranchCode() + this.getType().getCode() + this.number);
        int bNumber = Integer.parseInt(other.getBranch().getBranchCode() + other.getType().getCode() + other.number);
        return aNumber - bNumber;
    }

    /**
     * Converts AccountNumber to a string that can be printed.
     *
     * @return the AccountNumber with Branch Code, Account Type, and serial number as a String
     */
    @Override
    public String toString() {
        return this.branch.getBranchCode() + this.type.getCode() + this.number;
    }

    /**
     * Compares two AccountNumber objects for equality.
     *
     * @param obj other AccountNumber being checked for equality
     * @return true if they are the same object: AccountNumber's Branch, AccountType, and serial number are checked
     * false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof AccountNumber) {
            AccountNumber other = (AccountNumber) obj;
            return this.branch.equals(other.branch) && this.type.equals(other.type) && this.number.equals(other.number);
        }
        return false;
    }
}
