package banking;

import java.text.DecimalFormat;
import java.util.Random;

/**
 * The banking.AccountNumber class holds the banking.Account Number
 * The account number is a  9-digit number composed of a:
 * 3-digit branch code, a 2-digit account type, and a 4-digit serial number randomly generated by the system.
 * For the account type, 01 represents checking, 02 represents regular savings, and 03 represents money market savings.
 *
 * @author Vishal Saravanan, Yining Chen
 */

public class AccountNumber implements Comparable<AccountNumber> {
    private static final int SEED = 9999; //for a fix sequence of random numbers.
    private Branch branch; //banking.Branch object that represents location of bank
    private AccountType type; //banking.AccountType object that represents checking/savings/money market account
    private String number; //a 4-digit number generated by the Random object

    private static final Random RANDOM = new Random(SEED);
    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0000");


    public AccountNumber(Branch branch, AccountType type) {
        this.branch = branch;
        this.type = type;
        int num = RANDOM.nextInt(SEED);
        this.number = DECIMAL_FORMAT.format(num);
    }

    public AccountNumber(String number) {
        String branchCode = number.substring(0, 3);
        String typeCode = number.substring(3, 5);
        String serialNumber = number.substring(5, 9);

        // Find matching branch
        for (Branch branch : Branch.values()) {
            if (branch.getBranchCode().equalsIgnoreCase(branchCode)) {
                this.branch = branch;
                break;
            }
        }
        // Find matching account type
        for (AccountType type : AccountType.values()) {
            if (type.getCode().equalsIgnoreCase(typeCode)) {
                this.type = type;
                break;
            }
        }

        this.number = serialNumber;
    }

    public Branch getBranch() {
        return branch;
    }

    public AccountType getType() {
        return type;
    }

    public void setType(AccountType type) {
        this.type = type;
    }


    @Override
    public int compareTo(AccountNumber other) {
        int aNumber = Integer.parseInt(this.branch.getBranchCode() + this.getType().getCode() + this.number);
        int bNumber = Integer.parseInt(other.getBranch().getBranchCode() + other.getType().getCode() + other.number);
        return aNumber - bNumber;
    }

    /**
     * Converts banking.AccountNumber to a string that can be printed
     *
     * @return the banking.AccountNumber with banking.Branch Code, banking.Account Type, and serial number as a String
     */
    @Override
    public String toString() {
        return this.branch.getBranchCode() + this.type.getCode() + this.number;
    }

    /**
     * Compares two banking.AccountNumber objects for equality
     *
     * @param obj other banking.AccountNumber being checked for equality
     * @return true if they are the same object: banking.AccountNumber's banking.Branch, banking.AccountType, and serial number are checked
     * false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof AccountNumber) {
            AccountNumber other = (AccountNumber) obj;
            return this.branch.equals(other.branch) && this.type.equals(other.type) && this.number.equals(other.number);
        }
        return false;
    }

    public static void main(String[] args) {
        System.out.println(RANDOM.nextInt(SEED));
        System.out.println(RANDOM.nextInt(SEED));
        System.out.println(RANDOM.nextInt(SEED));
        AccountNumber number =  new AccountNumber("100016789");
        System.out.println(number);
    }
}
