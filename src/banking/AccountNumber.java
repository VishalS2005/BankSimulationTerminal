package banking; /**
 * The banking.AccountNumber class holds the banking.Account Number
 * The account number is a  9-digit number composed of a:
 * 3-digit branch code, a 2-digit account type, and a 4-digit serial number randomly generated by the system.
 * For the account type, 01 represents checking, 02 represents regular savings, and 03 represents money market savings.
 *
 * @author Vishal Saravanan, Yining Chen
 */

import java.util.Random;

public class AccountNumber implements Comparable<AccountNumber> {
    private static final int SEED = 9999; //for a fix sequence of random numbers.
    private Branch branch; //banking.Branch object that represents location of bank
    private AccountType type; //banking.AccountType object that represents checking/savings/money market account
    private String number; //a 4-digit number generated by the Random object

    public AccountNumber(Branch branch, AccountType type, String number) { //constructor for banking.AccountNumber
        this.branch = branch;
        this.type = type;
        this.number = generateSerialNumber(); //random 4 digit number
    }

    /**
     * Randomly generates a 4-digit number for the last 4 digits of the account number
     * Uses the Random library
     *
     * @return String representation of the 4-digit number
     */
    private String generateSerialNumber() {
        Random random = new Random(SEED);
        int num = random.nextInt(10000);
        return String.format("%04d", num);
    }

    /**
     * Compares the serial number portion of two banking.Account Numbers
     *
     * @param other account number's serial code being compared with
     * @return 0 if banking.Account Numbers are equal,
     * a negative integer if first account serial number is less than second account,
     * a positive integer if first account serial number is greater than second account
     */
    @Override
    public int compareTo(AccountNumber other) {
        return this.number.compareTo(other.number); //String compare
    }

    /**
     * Converts banking.AccountNumber to a string that can be printed
     *
     * @return the banking.AccountNumber with banking.Branch Code, banking.Account Type, and serial number as a String
     */
    @Override
    public String toString() {
        return this.branch.toString() + this.type.toString() + this.number;
    }

    /**
     * Compares two banking.AccountNumber objects for equality
     *
     * @param obj other banking.AccountNumber being checked for equality
     * @return true if they are the same object: banking.AccountNumber's banking.Branch, banking.AccountType, and serial number are checked
     * false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof AccountNumber) {
            AccountNumber other = (AccountNumber) obj;
            return this.branch.equals(other.branch) && this.type.equals(other.type) && this.number.equals(other.number);
        }
        return false;
    }
}
